name: Deploy to Production

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_pgsql, gd
        coverage: none
        
    - name: Validate composer.json
      run: composer validate --strict
      
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-dev --optimize-autoloader --no-scripts
      
      
    - name: Create deployment archive
      run: |
        tar -czf deploy.tar.gz \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='node_modules' \
          --exclude='tests' \
          --exclude='.env' \
          --exclude='.env.*' \
          --exclude='*.md' \
          .
          
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: 22
        script: |
          # Create backup of current deployment
          if [ -d "/var/www/nowa-nadzieja-crm" ]; then
            sudo cp -r /var/www/nowa-nadzieja-crm /var/www/nowa-nadzieja-crm.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # Create deployment directory
          sudo mkdir -p /var/www/nowa-nadzieja-crm-new
          sudo chown debian:www-data /var/www/nowa-nadzieja-crm-new
          
    - name: Upload deployment archive
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        source: "deploy.tar.gz"
        target: "/home/debian/"
        
    - name: Extract and configure application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: 22
        script: |
          # Extract application
          cd /var/www/nowa-nadzieja-crm-new
          tar -xzf /home/debian/deploy.tar.gz
          
          # Create .env file
          cat > .env << 'EOF'
          APP_ENV=prod
          APP_SECRET=${{ secrets.APP_SECRET }}
          DATABASE_URL="postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}?serverVersion=16&charset=utf8"
          MAILER_DSN=${{ secrets.MAILER_DSN }}
          STRUKTURA_API_KEY=${{ secrets.STRUKTURA_API_KEY }}
          CORS_ALLOW_ORIGIN=^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$
          FORCE_HTTPS=true
          CSP_REPORT_URI=/csp-report
          EOF
          
          # Set correct permissions
          sudo chown -R debian:www-data /var/www/nowa-nadzieja-crm-new
          sudo chmod -R 755 /var/www/nowa-nadzieja-crm-new
          sudo chmod -R 775 /var/www/nowa-nadzieja-crm-new/var
          sudo chmod -R 775 /var/www/nowa-nadzieja-crm-new/public/uploads
          
          # Run database migrations
          cd /var/www/nowa-nadzieja-crm-new
          php bin/console doctrine:migrations:migrate --no-interaction
          
          # Clear and warm up cache
          php bin/console cache:clear --env=prod
          php bin/console cache:warmup --env=prod
          
          # Atomic deployment swap
          if [ -d "/var/www/nowa-nadzieja-crm" ]; then
            sudo mv /var/www/nowa-nadzieja-crm /var/www/nowa-nadzieja-crm-old
          fi
          sudo mv /var/www/nowa-nadzieja-crm-new /var/www/nowa-nadzieja-crm
          
          # Restart services
          sudo systemctl restart php8.4-fpm
          sudo systemctl reload nginx
          
          # Cleanup
          rm -f /home/debian/deploy.tar.gz
          if [ -d "/var/www/nowa-nadzieja-crm-old" ]; then
            sudo rm -rf /var/www/nowa-nadzieja-crm-old
          fi
          
          echo "Deployment completed successfully!"